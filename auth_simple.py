# -*- coding: utf-8 -*-
"""
Sistema de Autentica√ß√£o Simples para Dashboard KE5Z
Sistema completo de autentica√ß√£o com administra√ß√£o de usu√°rios
"""

import streamlit as st
import json
import hashlib
import os
import sys
from datetime import datetime
from typing import Dict, Any, Optional, List

# Fun√ß√£o para determinar diret√≥rio base
def get_data_dir():
    """Retorna o diret√≥rio onde os arquivos de dados devem ser salvos"""
    if hasattr(sys, '_MEIPASS'):
        # No execut√°vel: salvar no diret√≥rio do execut√°vel (fora do _internal)
        return os.path.dirname(sys.executable)
    else:
        # Em desenvolvimento: diret√≥rio atual
        return os.path.dirname(os.path.abspath(__file__))

# Configura√ß√µes do sistema
DATA_DIR = get_data_dir()
USUARIOS_FILE = os.path.join(DATA_DIR, "usuarios.json")
USUARIOS_PADRAO_FILE = os.path.join(DATA_DIR, "usuarios_padrao.json")

def carregar_usuarios() -> Dict[str, Any]:
    """Carrega usu√°rios do arquivo JSON"""
    try:
        # Primeiro, tentar carregar usuarios.json
        if os.path.exists(USUARIOS_FILE):
            with open(USUARIOS_FILE, 'r', encoding='utf-8') as f:
                usuarios = json.load(f)
                # Verificar se tem admin, se n√£o, adicionar do padr√£o
                if "admin" not in usuarios and os.path.exists(USUARIOS_PADRAO_FILE):
                    with open(USUARIOS_PADRAO_FILE, 'r', encoding='utf-8') as f:
                        usuarios_padrao = json.load(f)
                        if "admin" in usuarios_padrao:
                            usuarios["admin"] = usuarios_padrao["admin"]
                            salvar_usuarios(usuarios)
                return usuarios
        
        # Se usuarios.json n√£o existe, tentar carregar do padr√£o
        if os.path.exists(USUARIOS_PADRAO_FILE):
            with open(USUARIOS_PADRAO_FILE, 'r', encoding='utf-8') as f:
                usuarios = json.load(f)
                # Converter senha para senha_hash se necess√°rio
                for user, data in usuarios.items():
                    if "senha" in data and "senha_hash" not in data:
                        data["senha_hash"] = data.pop("senha")
                # Salvar como usuarios.json
                salvar_usuarios(usuarios)
                return usuarios
        
        # Se nenhum arquivo existe, criar admin padr√£o
        usuarios_padrao = {
            "admin": {
                "senha_hash": hashlib.sha256("admin123".encode()).hexdigest(),
                "tipo": "administrador",
                "status": "aprovado",
                "data_criacao": datetime.now().isoformat(),
                "aprovado_em": datetime.now().isoformat()
            }
        }
        salvar_usuarios(usuarios_padrao)
        return usuarios_padrao
        
    except Exception as e:
        st.error(f"Erro ao carregar usu√°rios: {e}")
        return {}

def salvar_usuarios(usuarios: Dict[str, Any]) -> bool:
    """Salva usu√°rios no arquivo JSON"""
    try:
        with open(USUARIOS_FILE, 'w', encoding='utf-8') as f:
            json.dump(usuarios, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        st.error(f"Erro ao salvar usu√°rios: {e}")
        return False

def criar_hash_senha(senha: str) -> str:
    """Cria hash SHA-256 da senha"""
    return hashlib.sha256(senha.encode()).hexdigest()

def verificar_senha(senha: str, hash_armazenado: str) -> bool:
    """Verifica se a senha est√° correta"""
    return criar_hash_senha(senha) == hash_armazenado

def verificar_autenticacao():
    """Verifica se o usu√°rio est√° autenticado"""
    if 'autenticado' not in st.session_state or not st.session_state.autenticado:
        mostrar_tela_login()
        st.stop()

def mostrar_tela_login():
    """Exibe a tela de login"""
    st.title("üîê Login - Dashboard KE5Z")
    st.markdown("---")
    
    with st.form("login_form"):
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            st.markdown("### üìã Acesso ao Sistema")
            
            # Sele√ß√£o de modo de opera√ß√£o
            modo_operacao = st.selectbox(
                "üåê Modo de Opera√ß√£o:",
                ["completo", "cloud"],
                index=0,  # Sempre selecionar "completo" por padr√£o
                format_func=lambda x: "üíª Completo (Local)" if x == "completo" else "‚òÅÔ∏è Cloud (Otimizado)",
                help="Completo: Acesso total aos dados | Cloud: Dados otimizados para melhor performance"
            )
            
            usuario = st.text_input("üë§ Usu√°rio:", placeholder="Digite seu usu√°rio")
            senha = st.text_input("üîë Senha:", type="password", placeholder="Digite sua senha")
            
            col_login, col_limpar = st.columns(2)
            
            with col_login:
                if st.form_submit_button("üöÄ Entrar", use_container_width=True, type="primary"):
                    if usuario and senha:
                        if fazer_login(usuario, senha, modo_operacao):
                            st.success("‚úÖ Login realizado com sucesso!")
                            st.rerun()
                        else:
                            st.error("‚ùå Usu√°rio ou senha incorretos!")
                    else:
                        st.error("‚ùå Preencha todos os campos!")
            
            with col_limpar:
                if st.form_submit_button("üîÑ Limpar", use_container_width=True):
                    st.rerun()
    
    # Informa√ß√µes sobre o sistema
    st.markdown("---")
    st.info("üí° **Sistema de An√°lise Financeira KE5Z** - Acesso restrito a usu√°rios autorizados")

def fazer_login(usuario: str, senha: str, modo_operacao: str) -> bool:
    """Realiza o login do usu√°rio"""
    usuarios = carregar_usuarios()
    
    if usuario in usuarios:
        if verificar_senha(senha, usuarios[usuario]['senha_hash']):
            # Login bem-sucedido
            st.session_state.autenticado = True
            st.session_state.usuario_nome = usuario
            st.session_state.usuario_tipo = usuarios[usuario].get('tipo', 'usuario')
            st.session_state.modo_operacao = modo_operacao
            return True
    
    return False

def exibir_header_usuario():
    """Exibe o header com informa√ß√µes do usu√°rio"""
    if 'usuario_nome' in st.session_state:
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            tipo_icon = "üëë" if st.session_state.get('usuario_tipo') == 'administrador' else "üë•"
            st.write(f"{tipo_icon} **Usu√°rio:** {st.session_state.usuario_nome}")
        
        with col2:
            modo_icon = "‚òÅÔ∏è" if st.session_state.get('modo_operacao') == 'cloud' else "üíª"
            modo_text = "Cloud" if st.session_state.get('modo_operacao') == 'cloud' else "Completo"
            st.write(f"{modo_icon} **Modo:** {modo_text}")
        
        with col3:
            if st.button("üö™ Logout", use_container_width=True):
                logout()

def logout():
    """Realiza logout do usu√°rio"""
    # Limpar sess√£o
    for key in ['autenticado', 'usuario_nome', 'usuario_tipo', 'modo_operacao']:
        if key in st.session_state:
            del st.session_state[key]
    
    st.success("‚úÖ Logout realizado com sucesso!")
    st.rerun()

def eh_administrador() -> bool:
    """Verifica se o usu√°rio atual √© administrador"""
    return st.session_state.get('usuario_tipo') == 'administrador'

def verificar_status_aprovado(usuario: str) -> bool:
    """Verifica se o usu√°rio est√° aprovado"""
    usuarios = carregar_usuarios()
    if usuario in usuarios:
        return usuarios[usuario].get('status') == 'aprovado'
    return False

def get_modo_operacao() -> str:
    """Retorna o modo de opera√ß√£o atual"""
    return st.session_state.get('modo_operacao', 'completo')

def is_modo_cloud() -> bool:
    """Verifica se est√° no modo cloud"""
    return get_modo_operacao() == 'cloud'

def get_usuarios_cloud() -> Dict[str, Any]:
    """Retorna usu√°rios para modo cloud"""
    return carregar_usuarios()

def adicionar_usuario_simples(usuario: str, senha: str, tipo: str) -> tuple[bool, str]:
    """Adiciona um novo usu√°rio"""
    usuarios = carregar_usuarios()
    
    if usuario in usuarios:
        return False, "‚ùå Usu√°rio j√° existe!"
    
    if len(senha) < 4:
        return False, "‚ùå Senha deve ter pelo menos 4 caracteres!"
    
    usuarios[usuario] = {
        "senha_hash": criar_hash_senha(senha),
        "tipo": tipo,
        "status": "aprovado",
        "data_criacao": datetime.now().isoformat(),
        "aprovado_em": datetime.now().isoformat()
    }
    
    if salvar_usuarios(usuarios):
        return True, f"‚úÖ Usu√°rio '{usuario}' criado com sucesso!"
    else:
        return False, "‚ùå Erro ao salvar usu√°rio!"

def salvar_usuario_json(usuario: str, senha: str, tipo: str) -> tuple[bool, str]:
    """Salva usu√°rio no JSON (alias para compatibilidade)"""
    return adicionar_usuario_simples(usuario, senha, tipo)

def listar_usuarios_json() -> Dict[str, Any]:
    """Lista usu√°rios do JSON (alias para compatibilidade)"""
    return carregar_usuarios()

# Fun√ß√µes de compatibilidade com o c√≥digo existente
def get_usuarios_cloud() -> Dict[str, Any]:
    """Retorna usu√°rios para modo cloud"""
    return carregar_usuarios()

def adicionar_usuario_simples(usuario: str, senha: str, tipo: str) -> tuple[bool, str]:
    """Adiciona usu√°rio simples"""
    try:
        usuarios = carregar_usuarios()
        
        # Verificar se usu√°rio j√° existe
        if usuario in usuarios:
            return False, f"Usu√°rio '{usuario}' j√° existe!"
        
        # Criar hash da senha
        senha_hash = criar_hash_senha(senha)
        
        # Adicionar usu√°rio
        usuarios[usuario] = {
            'senha_hash': senha_hash,
            'tipo': tipo,
            'status': 'pendente',
            'data_criacao': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'data_aprovacao': None
        }
        
        # Salvar no arquivo
        salvar_usuarios(usuarios)
        
        return True, f"Usu√°rio '{usuario}' criado com sucesso!"
        
    except Exception as e:
        return False, f"Erro ao criar usu√°rio: {str(e)}"
